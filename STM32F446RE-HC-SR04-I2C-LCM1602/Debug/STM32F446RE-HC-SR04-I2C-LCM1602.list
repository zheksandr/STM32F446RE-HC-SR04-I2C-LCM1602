
STM32F446RE-HC-SR04-I2C-LCM1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e8  080046e8  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f0  080046f0  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f0  080046f0  000056f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046f4  080046f4  000056f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080046f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000001c  08004714  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004714  00006138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010291  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210e  00000000  00000000  000162dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000183f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c89  00000000  00000000  000193c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002191f  00000000  00000000  0001a049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bf6  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfddd  00000000  00000000  0004e55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e33b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  0011e380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00122834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080046a8 	.word	0x080046a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	080046a8 	.word	0x080046a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96a 	b.w	8000cd0 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d14e      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a20:	4694      	mov	ip, r2
 8000a22:	458c      	cmp	ip, r1
 8000a24:	4686      	mov	lr, r0
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	d962      	bls.n	8000af2 <__udivmoddi4+0xde>
 8000a2c:	b14a      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	4091      	lsls	r1, r2
 8000a34:	fa20 f303 	lsr.w	r3, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f f68c 	uxth.w	r6, ip
 8000a4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a52:	fb07 1114 	mls	r1, r7, r4, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb04 f106 	mul.w	r1, r4, r6
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a6a:	f080 8112 	bcs.w	8000c92 <__udivmoddi4+0x27e>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 810f 	bls.w	8000c92 <__udivmoddi4+0x27e>
 8000a74:	3c02      	subs	r4, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a59      	subs	r1, r3, r1
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a82:	fb07 1110 	mls	r1, r7, r0, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb00 f606 	mul.w	r6, r0, r6
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x94>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9a:	f080 80fc 	bcs.w	8000c96 <__udivmoddi4+0x282>
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	f240 80f9 	bls.w	8000c96 <__udivmoddi4+0x282>
 8000aa4:	4463      	add	r3, ip
 8000aa6:	3802      	subs	r0, #2
 8000aa8:	1b9b      	subs	r3, r3, r6
 8000aaa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aae:	2100      	movs	r1, #0
 8000ab0:	b11d      	cbz	r5, 8000aba <__udivmoddi4+0xa6>
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d905      	bls.n	8000ace <__udivmoddi4+0xba>
 8000ac2:	b10d      	cbz	r5, 8000ac8 <__udivmoddi4+0xb4>
 8000ac4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
 8000acc:	e7f5      	b.n	8000aba <__udivmoddi4+0xa6>
 8000ace:	fab3 f183 	clz	r1, r3
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d146      	bne.n	8000b64 <__udivmoddi4+0x150>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xcc>
 8000ada:	4290      	cmp	r0, r2
 8000adc:	f0c0 80f0 	bcc.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ae0:	1a86      	subs	r6, r0, r2
 8000ae2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d0e6      	beq.n	8000aba <__udivmoddi4+0xa6>
 8000aec:	e9c5 6300 	strd	r6, r3, [r5]
 8000af0:	e7e3      	b.n	8000aba <__udivmoddi4+0xa6>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	f040 8090 	bne.w	8000c18 <__udivmoddi4+0x204>
 8000af8:	eba1 040c 	sub.w	r4, r1, ip
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	fa1f f78c 	uxth.w	r7, ip
 8000b04:	2101      	movs	r1, #1
 8000b06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b16:	fb07 f006 	mul.w	r0, r7, r6
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x11c>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x11a>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000b2e:	4626      	mov	r6, r4
 8000b30:	1a1c      	subs	r4, r3, r0
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb00 f707 	mul.w	r7, r0, r7
 8000b46:	429f      	cmp	r7, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x148>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x146>
 8000b54:	429f      	cmp	r7, r3
 8000b56:	f200 80b0 	bhi.w	8000cba <__udivmoddi4+0x2a6>
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	1bdb      	subs	r3, r3, r7
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0x9c>
 8000b64:	f1c1 0620 	rsb	r6, r1, #32
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b74:	fa04 f301 	lsl.w	r3, r4, r1
 8000b78:	ea43 030c 	orr.w	r3, r3, ip
 8000b7c:	40f4      	lsrs	r4, r6
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	0c38      	lsrs	r0, r7, #16
 8000b84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b88:	fbb4 fef0 	udiv	lr, r4, r0
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	fb00 441e 	mls	r4, r0, lr, r4
 8000b94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b98:	fb0e f90c 	mul.w	r9, lr, ip
 8000b9c:	45a1      	cmp	r9, r4
 8000b9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x1a6>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000baa:	f080 8084 	bcs.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bae:	45a1      	cmp	r9, r4
 8000bb0:	f240 8081 	bls.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb8:	443c      	add	r4, r7
 8000bba:	eba4 0409 	sub.w	r4, r4, r9
 8000bbe:	fa1f f983 	uxth.w	r9, r3
 8000bc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x1d2>
 8000bd6:	193c      	adds	r4, r7, r4
 8000bd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bdc:	d267      	bcs.n	8000cae <__udivmoddi4+0x29a>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0x29a>
 8000be2:	3b02      	subs	r3, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bea:	fba0 9302 	umull	r9, r3, r0, r2
 8000bee:	eba4 040c 	sub.w	r4, r4, ip
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	46ce      	mov	lr, r9
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	d351      	bcc.n	8000c9e <__udivmoddi4+0x28a>
 8000bfa:	d04e      	beq.n	8000c9a <__udivmoddi4+0x286>
 8000bfc:	b155      	cbz	r5, 8000c14 <__udivmoddi4+0x200>
 8000bfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000c02:	eb64 040c 	sbc.w	r4, r4, ip
 8000c06:	fa04 f606 	lsl.w	r6, r4, r6
 8000c0a:	40cb      	lsrs	r3, r1
 8000c0c:	431e      	orrs	r6, r3
 8000c0e:	40cc      	lsrs	r4, r1
 8000c10:	e9c5 6400 	strd	r6, r4, [r5]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e750      	b.n	8000aba <__udivmoddi4+0xa6>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	fa24 f303 	lsr.w	r3, r4, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	430c      	orrs	r4, r1
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c34:	fa1f f78c 	uxth.w	r7, ip
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c40:	0c23      	lsrs	r3, r4, #16
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f107 	mul.w	r1, r0, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x24c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c56:	d22c      	bcs.n	8000cb2 <__udivmoddi4+0x29e>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d92a      	bls.n	8000cb2 <__udivmoddi4+0x29e>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c68:	fb08 3311 	mls	r3, r8, r1, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb01 f307 	mul.w	r3, r1, r7
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x276>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c80:	d213      	bcs.n	8000caa <__udivmoddi4+0x296>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d911      	bls.n	8000caa <__udivmoddi4+0x296>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4464      	add	r4, ip
 8000c8a:	1ae4      	subs	r4, r4, r3
 8000c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c90:	e739      	b.n	8000b06 <__udivmoddi4+0xf2>
 8000c92:	4604      	mov	r4, r0
 8000c94:	e6f0      	b.n	8000a78 <__udivmoddi4+0x64>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e706      	b.n	8000aa8 <__udivmoddi4+0x94>
 8000c9a:	45c8      	cmp	r8, r9
 8000c9c:	d2ae      	bcs.n	8000bfc <__udivmoddi4+0x1e8>
 8000c9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ca2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7a8      	b.n	8000bfc <__udivmoddi4+0x1e8>
 8000caa:	4631      	mov	r1, r6
 8000cac:	e7ed      	b.n	8000c8a <__udivmoddi4+0x276>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e799      	b.n	8000be6 <__udivmoddi4+0x1d2>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e7d4      	b.n	8000c60 <__udivmoddi4+0x24c>
 8000cb6:	46d6      	mov	lr, sl
 8000cb8:	e77f      	b.n	8000bba <__udivmoddi4+0x1a6>
 8000cba:	4463      	add	r3, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e74d      	b.n	8000b5c <__udivmoddi4+0x148>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e70f      	b.n	8000ae8 <__udivmoddi4+0xd4>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	e730      	b.n	8000b30 <__udivmoddi4+0x11c>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000cde:	4a38      	ldr	r2, [pc, #224]	@ (8000dc0 <HD44780_Init+0xec>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000ce4:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <HD44780_Init+0xf0>)
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000cea:	4b37      	ldr	r3, [pc, #220]	@ (8000dc8 <HD44780_Init+0xf4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000cf0:	4b33      	ldr	r3, [pc, #204]	@ (8000dc0 <HD44780_Init+0xec>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d907      	bls.n	8000d08 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000cf8:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <HD44780_Init+0xf4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <HD44780_Init+0xf4>)
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e006      	b.n	8000d16 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d08:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <HD44780_Init+0xf4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc8 <HD44780_Init+0xf4>)
 8000d14:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d16:	f000 f97d 	bl	8001014 <DelayInit>
  HAL_Delay(50);
 8000d1a:	2032      	movs	r0, #50	@ 0x32
 8000d1c:	f000 fe6e 	bl	80019fc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d20:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <HD44780_Init+0xf0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f93b 	bl	8000fa0 <ExpanderWrite>
  HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d2e:	f000 fe65 	bl	80019fc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000d32:	2030      	movs	r0, #48	@ 0x30
 8000d34:	f000 f923 	bl	8000f7e <Write4Bits>
  DelayUS(4500);
 8000d38:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d3c:	f000 f994 	bl	8001068 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d40:	2030      	movs	r0, #48	@ 0x30
 8000d42:	f000 f91c 	bl	8000f7e <Write4Bits>
  DelayUS(4500);
 8000d46:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d4a:	f000 f98d 	bl	8001068 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d4e:	2030      	movs	r0, #48	@ 0x30
 8000d50:	f000 f915 	bl	8000f7e <Write4Bits>
  DelayUS(4500);
 8000d54:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d58:	f000 f986 	bl	8001068 <DelayUS>

  Write4Bits(0x02 << 4);
 8000d5c:	2020      	movs	r0, #32
 8000d5e:	f000 f90e 	bl	8000f7e <Write4Bits>
  DelayUS(100);
 8000d62:	2064      	movs	r0, #100	@ 0x64
 8000d64:	f000 f980 	bl	8001068 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HD44780_Init+0xf4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f8c6 	bl	8000f04 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <HD44780_Init+0xf8>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d7e:	f000 f875 	bl	8000e6c <HD44780_Display>
  HD44780_Clear();
 8000d82:	f000 f82b 	bl	8000ddc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HD44780_Init+0xfc>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HD44780_Init+0xfc>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f8b4 	bl	8000f04 <SendCommand>
  DelayUS(4500);
 8000d9c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000da0:	f000 f962 	bl	8001068 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000da4:	490b      	ldr	r1, [pc, #44]	@ (8000dd4 <HD44780_Init+0x100>)
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f876 	bl	8000e98 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000dac:	490a      	ldr	r1, [pc, #40]	@ (8000dd8 <HD44780_Init+0x104>)
 8000dae:	2001      	movs	r0, #1
 8000db0:	f000 f872 	bl	8000e98 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000db4:	f000 f81d 	bl	8000df2 <HD44780_Home>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000003b 	.word	0x2000003b
 8000dc4:	2000003c 	.word	0x2000003c
 8000dc8:	20000038 	.word	0x20000038
 8000dcc:	20000039 	.word	0x20000039
 8000dd0:	2000003a 	.word	0x2000003a
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HD44780_Clear>:

void HD44780_Clear()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 f88f 	bl	8000f04 <SendCommand>
  DelayUS(2000);
 8000de6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dea:	f000 f93d 	bl	8001068 <DelayUS>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HD44780_Home>:

void HD44780_Home()
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 f884 	bl	8000f04 <SendCommand>
  DelayUS(2000);
 8000dfc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e00:	f000 f932 	bl	8001068 <DelayUS>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HD44780_SetCursor+0x5c>)
 8000e1a:	f107 0408 	add.w	r4, r7, #8
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HD44780_SetCursor+0x60>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d303      	bcc.n	8000e36 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HD44780_SetCursor+0x60>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	3318      	adds	r3, #24
 8000e3c:	443b      	add	r3, r7
 8000e3e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f855 	bl	8000f04 <SendCommand>
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	080046c0 	.word	0x080046c0
 8000e68:	2000003b 	.word	0x2000003b

08000e6c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HD44780_Display+0x28>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HD44780_Display+0x28>)
 8000e7c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HD44780_Display+0x28>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f83b 	bl	8000f04 <SendCommand>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000039 	.word	0x20000039

08000e98 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f822 	bl	8000f04 <SendCommand>
  for (int i=0; i<8; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e009      	b.n	8000eda <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f826 	bl	8000f20 <SendChar>
  for (int i=0; i<8; i++)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	ddf2      	ble.n	8000ec6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f812 	bl	8000f20 <SendChar>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f812 	bl	8000f3c <Send>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f804 	bl	8000f3c <Send>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f023 030f 	bic.w	r3, r3, #15
 8000f52:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f80b 	bl	8000f7e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f68:	7bba      	ldrb	r2, [r7, #14]
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f804 	bl	8000f7e <Write4Bits>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f808 	bl	8000fa0 <ExpanderWrite>
  PulseEnable(value);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f820 	bl	8000fd8 <PulseEnable>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <ExpanderWrite+0x30>)
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000fb6:	f107 020f 	add.w	r2, r7, #15
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	214e      	movs	r1, #78	@ 0x4e
 8000fc2:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <ExpanderWrite+0x34>)
 8000fc4:	f001 f942 	bl	800224c <HAL_I2C_Master_Transmit>
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000003c 	.word	0x2000003c
 8000fd4:	20000040 	.word	0x20000040

08000fd8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffd8 	bl	8000fa0 <ExpanderWrite>
  DelayUS(20);
 8000ff0:	2014      	movs	r0, #20
 8000ff2:	f000 f839 	bl	8001068 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffce 	bl	8000fa0 <ExpanderWrite>
  DelayUS(20);
 8001004:	2014      	movs	r0, #20
 8001006:	f000 f82f 	bl	8001068 <DelayUS>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <DelayInit>:

static void DelayInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <DelayInit+0x4c>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a10      	ldr	r2, [pc, #64]	@ (8001060 <DelayInit+0x4c>)
 800101e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001022:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <DelayInit+0x4c>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <DelayInit+0x4c>)
 800102a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800102e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <DelayInit+0x50>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <DelayInit+0x50>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <DelayInit+0x50>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <DelayInit+0x50>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <DelayInit+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800104e:	bf00      	nop
  __ASM volatile ("NOP");
 8001050:	bf00      	nop
  __ASM volatile ("NOP");
 8001052:	bf00      	nop
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000edf0 	.word	0xe000edf0
 8001064:	e0001000 	.word	0xe0001000

08001068 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <DelayUS+0x44>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <DelayUS+0x48>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9a      	lsrs	r2, r3, #18
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <DelayUS+0x4c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <DelayUS+0x4c>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f6      	bhi.n	800108a <DelayUS+0x22>
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000010 	.word	0x20000010
 80010b0:	431bde83 	.word	0x431bde83
 80010b4:	e0001000 	.word	0xe0001000

080010b8 <delay>:
uint32_t IC_Val2 = 0;
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;
uint8_t Distance =0;
//function dedicated to wait for 10 microseconds
void delay (uint16_t time){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <delay+0x30>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<time);
 80010ca:	bf00      	nop
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <delay+0x30>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3f9      	bcc.n	80010cc <delay+0x14>
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000094 	.word	0x20000094

080010ec <HCSR04_Read>:
//sending trigger signal to HC-SR04
void HCSR04_Read (void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HCSR04_Read+0x38>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HCSR04_Read+0x38>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0202 	orr.w	r2, r2, #2
 80010fe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <HCSR04_Read+0x3c>)
 8001108:	f000 ff42 	bl	8001f90 <HAL_GPIO_WritePin>
	delay(40);
 800110c:	2028      	movs	r0, #40	@ 0x28
 800110e:	f7ff ffd3 	bl	80010b8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <HCSR04_Read+0x3c>)
 800111a:	f000 ff39 	bl	8001f90 <HAL_GPIO_WritePin>


}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000094 	.word	0x20000094
 8001128:	40020000 	.word	0x40020000
 800112c:	00000000 	.word	0x00000000

08001130 <HAL_TIM_IC_CaptureCallback>:
//elaboration of output from echo
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 8083 	bne.w	8001248 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if(Is_First_Captured == 0)
 8001142:	4b45      	ldr	r3, [pc, #276]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d11a      	bne.n	8001180 <HAL_TIM_IC_CaptureCallback+0x50>
			{
				IC_Val1= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800114a:	2100      	movs	r1, #0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f002 fcc3 	bl	8003ad8 <HAL_TIM_ReadCapturedValue>
 8001152:	4603      	mov	r3, r0
 8001154:	4a41      	ldr	r2, [pc, #260]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001156:	6013      	str	r3, [r2, #0]
				Is_First_Captured=1;
 8001158:	4b3f      	ldr	r3, [pc, #252]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 020a 	bic.w	r2, r2, #10
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0202 	orr.w	r2, r2, #2
 800117c:	621a      	str	r2, [r3, #32]
				Is_First_Captured = 0;
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim1,TIM_IT_CC1);
			}
		}
}
 800117e:	e063      	b.n	8001248 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured == 1)
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d15f      	bne.n	8001248 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f002 fca4 	bl	8003ad8 <HAL_TIM_ReadCapturedValue>
 8001190:	4603      	mov	r3, r0
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001194:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val2 > IC_Val1){
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d907      	bls.n	80011ba <HAL_TIM_IC_CaptureCallback+0x8a>
					Difference=IC_Val2-IC_Val1;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e00f      	b.n	80011da <HAL_TIM_IC_CaptureCallback+0xaa>
				else if (IC_Val1 > IC_Val2)
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d909      	bls.n	80011da <HAL_TIM_IC_CaptureCallback+0xaa>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011d4:	33ff      	adds	r3, #255	@ 0xff
 80011d6:	4a23      	ldr	r2, [pc, #140]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011d8:	6013      	str	r3, [r2, #0]
				Distance = Difference * .034/2;
 80011da:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f954 	bl	800048c <__aeabi_ui2d>
 80011e4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff f9c9 	bl	8000580 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011fe:	f7ff fae9 	bl	80007d4 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fbcb 	bl	80009a4 <__aeabi_d2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001214:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0;
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 020a 	bic.w	r2, r2, #10
 800122a:	621a      	str	r2, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a12      	ldr	r2, [r2, #32]
 8001236:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1,TIM_IT_CC1);
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0202 	bic.w	r2, r2, #2
 8001246:	60da      	str	r2, [r3, #12]
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	b020c49c 	.word	0xb020c49c
 8001254:	3fa16872 	.word	0x3fa16872
 8001258:	20000130 	.word	0x20000130
 800125c:	20000124 	.word	0x20000124
 8001260:	20000128 	.word	0x20000128
 8001264:	2000012c 	.word	0x2000012c
 8001268:	20000131 	.word	0x20000131
 800126c:	20000094 	.word	0x20000094

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fb50 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f840 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 f958 	bl	8001530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001280:	f000 f92c 	bl	80014dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001284:	f000 f8a6 	bl	80013d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001288:	f000 f8d2 	bl	8001430 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <main+0x80>)
 8001290:	f002 f96e 	bl	8003570 <HAL_TIM_IC_Start_IT>
  HD44780_Init(2);
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff fd1d 	bl	8000cd4 <HD44780_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HCSR04_Read();
 800129a:	f7ff ff27 	bl	80010ec <HCSR04_Read>
	HD44780_Clear();
 800129e:	f7ff fd9d 	bl	8000ddc <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fdaf 	bl	8000e08 <HD44780_SetCursor>
	HD44780_PrintSpecialChar((Distance/10+48));
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <main+0x84>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <main+0x88>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3330      	adds	r3, #48	@ 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe14 	bl	8000eea <HD44780_PrintSpecialChar>
	HD44780_PrintSpecialChar((Distance%10+48));
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <main+0x84>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <main+0x88>)
 80012c8:	fba3 1302 	umull	r1, r3, r3, r2
 80012cc:	08d9      	lsrs	r1, r3, #3
 80012ce:	460b      	mov	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3330      	adds	r3, #48	@ 0x30
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fe03 	bl	8000eea <HD44780_PrintSpecialChar>
	HAL_Delay(500);
 80012e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012e8:	f000 fb88 	bl	80019fc <HAL_Delay>
	HCSR04_Read();
 80012ec:	bf00      	nop
 80012ee:	e7d4      	b.n	800129a <main+0x2a>
 80012f0:	20000094 	.word	0x20000094
 80012f4:	20000131 	.word	0x20000131
 80012f8:	cccccccd 	.word	0xcccccccd

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	@ 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2234      	movs	r2, #52	@ 0x34
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f003 f9a0 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <SystemClock_Config+0xd0>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	4a28      	ldr	r2, [pc, #160]	@ (80013cc <SystemClock_Config+0xd0>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001330:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <SystemClock_Config+0xd0>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <SystemClock_Config+0xd4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <SystemClock_Config+0xd4>)
 800134a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <SystemClock_Config+0xd4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001370:	2308      	movs	r3, #8
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001374:	2350      	movs	r3, #80	@ 0x50
 8001376:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fe03 	bl	8002f94 <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001394:	f000 f93c 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001398:	230f      	movs	r3, #15
 800139a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	2302      	movs	r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2102      	movs	r1, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 faa3 	bl	8002900 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013c0:	f000 f926 	bl	8001610 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3750      	adds	r7, #80	@ 0x50
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_I2C1_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <MX_I2C1_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_I2C1_Init+0x50>)
 80013e0:	4a12      	ldr	r2, [pc, #72]	@ (800142c <MX_I2C1_Init+0x58>)
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_I2C1_Init+0x50>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_I2C1_Init+0x50>)
 8001412:	f000 fdd7 	bl	8001fc4 <HAL_I2C_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 f8f8 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000040 	.word	0x20000040
 8001428:	40005400 	.word	0x40005400
 800142c:	000186a0 	.word	0x000186a0

08001430 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800144c:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 800144e:	4a22      	ldr	r2, [pc, #136]	@ (80014d8 <MX_TIM1_Init+0xa8>)
 8001450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 8001454:	224f      	movs	r2, #79	@ 0x4f
 8001456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 8001460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001478:	4816      	ldr	r0, [pc, #88]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 800147a:	f002 f829 	bl	80034d0 <HAL_TIM_IC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001484:	f000 f8c4 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	480f      	ldr	r0, [pc, #60]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 8001498:	f002 fd86 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014a2:	f000 f8b5 	bl	8001610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_TIM1_Init+0xa4>)
 80014be:	f002 fa6f 	bl	80039a0 <HAL_TIM_IC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80014c8:	f000 f8a2 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000094 	.word	0x20000094
 80014d8:	40010000 	.word	0x40010000

080014dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <MX_USART2_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_USART2_UART_Init+0x4c>)
 8001514:	f002 fdd8 	bl	80040c8 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 f877 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000dc 	.word	0x200000dc
 800152c:	40004400 	.word	0x40004400

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <MX_GPIO_Init+0xd4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <MX_GPIO_Init+0xd4>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_GPIO_Init+0xd4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_GPIO_Init+0xd4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <MX_GPIO_Init+0xd4>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_GPIO_Init+0xd4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80015bc:	4812      	ldr	r0, [pc, #72]	@ (8001608 <MX_GPIO_Init+0xd8>)
 80015be:	f000 fce7 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <MX_GPIO_Init+0xdc>)
 80015da:	f000 fb45 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80015de:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_GPIO_Init+0xd8>)
 80015f8:	f000 fb36 	bl	8001c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020800 	.word	0x40020800

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <Error_Handler+0x8>

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <HAL_MspInit+0x4c>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800165a:	2007      	movs	r0, #7
 800165c:	f000 fac2 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <HAL_I2C_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12c      	bne.n	80016e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016bc:	2304      	movs	r3, #4
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <HAL_I2C_MspInit+0x8c>)
 80016c8:	f000 face 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_I2C_MspInit+0x88>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	@ 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400

080016fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_TIM_IC_MspInit+0x94>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d134      	bne.n	8001788 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_TIM_IC_MspInit+0x98>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_TIM_IC_MspInit+0x98>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_TIM_IC_MspInit+0x98>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_TIM_IC_MspInit+0x98>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <HAL_TIM_IC_MspInit+0x98>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_TIM_IC_MspInit+0x98>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001768:	2301      	movs	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4809      	ldr	r0, [pc, #36]	@ (8001798 <HAL_TIM_IC_MspInit+0x9c>)
 8001774:	f000 fa78 	bl	8001c68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	201b      	movs	r0, #27
 800177e:	f000 fa3c 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001782:	201b      	movs	r0, #27
 8001784:	f000 fa55 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	@ 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010000 	.word	0x40010000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12b      	bne.n	8001816 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f6:	230c      	movs	r3, #12
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001806:	2307      	movs	r3, #7
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_UART_MspInit+0x8c>)
 8001812:	f000 fa29 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	@ 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004400 	.word	0x40004400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001882:	f000 f89b 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM1_CC_IRQHandler+0x10>)
 8001892:	f001 ff95 	bl	80037c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000094 	.word	0x20000094

080018a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <SystemInit+0x20>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <SystemInit+0x20>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018c8:	f7ff ffea 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018f2:	f002 feb5 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7ff fcbb 	bl	8001270 <main>
  bx  lr    
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001908:	080046f8 	.word	0x080046f8
  ldr r2, =_sbss
 800190c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001910:	20000138 	.word	0x20000138

08001914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <HAL_Init+0x40>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_Init+0x40>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <HAL_Init+0x40>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f94f 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	2000      	movs	r0, #0
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fe66 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f967 	bl	8001c4e <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f92f 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	@ (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000010 	.word	0x20000010
 80019b4:	20000018 	.word	0x20000018
 80019b8:	20000014 	.word	0x20000014

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000018 	.word	0x20000018
 80019e0:	20000134 	.word	0x20000134

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000134 	.word	0x20000134

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000018 	.word	0x20000018

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff3e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff31 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e165      	b.n	8001f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8154 	bne.w	8001f4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80ae 	beq.w	8001f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	@ (8001f70 <HAL_GPIO_Init+0x308>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x21a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	@ (8001f74 <HAL_GPIO_Init+0x30c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x216>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	@ (8001f78 <HAL_GPIO_Init+0x310>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x314>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x20e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <HAL_GPIO_Init+0x318>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x20a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_GPIO_Init+0x31c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x206>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a49      	ldr	r2, [pc, #292]	@ (8001f88 <HAL_GPIO_Init+0x320>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x202>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a31      	ldr	r2, [pc, #196]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f44:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f ae96 	bls.w	8001c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e12b      	b.n	800222e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fb3e 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	@ 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002028:	f000 fd5c 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 800202c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a81      	ldr	r2, [pc, #516]	@ (8002238 <HAL_I2C_Init+0x274>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d807      	bhi.n	8002048 <HAL_I2C_Init+0x84>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a80      	ldr	r2, [pc, #512]	@ (800223c <HAL_I2C_Init+0x278>)
 800203c:	4293      	cmp	r3, r2
 800203e:	bf94      	ite	ls
 8002040:	2301      	movls	r3, #1
 8002042:	2300      	movhi	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e006      	b.n	8002056 <HAL_I2C_Init+0x92>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a7d      	ldr	r2, [pc, #500]	@ (8002240 <HAL_I2C_Init+0x27c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	bf94      	ite	ls
 8002050:	2301      	movls	r3, #1
 8002052:	2300      	movhi	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0e7      	b.n	800222e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a78      	ldr	r2, [pc, #480]	@ (8002244 <HAL_I2C_Init+0x280>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9b      	lsrs	r3, r3, #18
 8002068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a6a      	ldr	r2, [pc, #424]	@ (8002238 <HAL_I2C_Init+0x274>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d802      	bhi.n	8002098 <HAL_I2C_Init+0xd4>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	e009      	b.n	80020ac <HAL_I2C_Init+0xe8>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	4a69      	ldr	r2, [pc, #420]	@ (8002248 <HAL_I2C_Init+0x284>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	3301      	adds	r3, #1
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	495c      	ldr	r1, [pc, #368]	@ (8002238 <HAL_I2C_Init+0x274>)
 80020c8:	428b      	cmp	r3, r1
 80020ca:	d819      	bhi.n	8002100 <HAL_I2C_Init+0x13c>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e59      	subs	r1, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020e0:	400b      	ands	r3, r1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_I2C_Init+0x138>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e59      	subs	r1, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fa:	e051      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e04f      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d111      	bne.n	800212c <HAL_I2C_Init+0x168>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	440b      	add	r3, r1
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e012      	b.n	8002152 <HAL_I2C_Init+0x18e>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	0099      	lsls	r1, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Init+0x196>
 8002156:	2301      	movs	r3, #1
 8002158:	e022      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10e      	bne.n	8002180 <HAL_I2C_Init+0x1bc>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e58      	subs	r0, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	fbb0 f3f3 	udiv	r3, r0, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800217e:	e00f      	b.n	80021a0 <HAL_I2C_Init+0x1dc>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e58      	subs	r0, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	0099      	lsls	r1, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6809      	ldr	r1, [r1, #0]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6911      	ldr	r1, [r2, #16]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68d2      	ldr	r2, [r2, #12]
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	000186a0 	.word	0x000186a0
 800223c:	001e847f 	.word	0x001e847f
 8002240:	003d08ff 	.word	0x003d08ff
 8002244:	431bde83 	.word	0x431bde83
 8002248:	10624dd3 	.word	0x10624dd3

0800224c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	461a      	mov	r2, r3
 8002258:	460b      	mov	r3, r1
 800225a:	817b      	strh	r3, [r7, #10]
 800225c:	4613      	mov	r3, r2
 800225e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff fbc0 	bl	80019e4 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	f040 80e0 	bne.w	8002434 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2319      	movs	r3, #25
 800227a:	2201      	movs	r2, #1
 800227c:	4970      	ldr	r1, [pc, #448]	@ (8002440 <HAL_I2C_Master_Transmit+0x1f4>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f964 	bl	800254c <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
 800228c:	e0d3      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2C_Master_Transmit+0x50>
 8002298:	2302      	movs	r3, #2
 800229a:	e0cc      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d007      	beq.n	80022c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2221      	movs	r2, #33	@ 0x21
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2210      	movs	r2, #16
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	893a      	ldrh	r2, [r7, #8]
 80022f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a50      	ldr	r2, [pc, #320]	@ (8002444 <HAL_I2C_Master_Transmit+0x1f8>)
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002304:	8979      	ldrh	r1, [r7, #10]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	6a3a      	ldr	r2, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f89c 	bl	8002448 <I2C_MasterRequestWrite>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e08d      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002330:	e066      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	6a39      	ldr	r1, [r7, #32]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fa22 	bl	8002780 <I2C_WaitOnTXEFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00d      	beq.n	800235e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b04      	cmp	r3, #4
 8002348:	d107      	bne.n	800235a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002358:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06b      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d11b      	bne.n	80023d4 <HAL_I2C_Master_Transmit+0x188>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d017      	beq.n	80023d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	6a39      	ldr	r1, [r7, #32]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fa19 	bl	8002810 <I2C_WaitOnBTFFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d107      	bne.n	80023fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e01a      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d194      	bne.n	8002332 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	00100002 	.word	0x00100002
 8002444:	ffff0000 	.word	0xffff0000

08002448 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	460b      	mov	r3, r1
 8002456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d006      	beq.n	8002472 <I2C_MasterRequestWrite+0x2a>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d003      	beq.n	8002472 <I2C_MasterRequestWrite+0x2a>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002470:	d108      	bne.n	8002484 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e00b      	b.n	800249c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	2b12      	cmp	r3, #18
 800248a:	d107      	bne.n	800249c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800249a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f84f 	bl	800254c <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024c2:	d103      	bne.n	80024cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e035      	b.n	800253c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024d8:	d108      	bne.n	80024ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	e01b      	b.n	8002524 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024ec:	897b      	ldrh	r3, [r7, #10]
 80024ee:	11db      	asrs	r3, r3, #7
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0306 	and.w	r3, r3, #6
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f063 030f 	orn	r3, r3, #15
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	490e      	ldr	r1, [pc, #56]	@ (8002544 <I2C_MasterRequestWrite+0xfc>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f898 	bl	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e010      	b.n	800253c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800251a:	897b      	ldrh	r3, [r7, #10]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4907      	ldr	r1, [pc, #28]	@ (8002548 <I2C_MasterRequestWrite+0x100>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f888 	bl	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	00010008 	.word	0x00010008
 8002548:	00010002 	.word	0x00010002

0800254c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800255c:	e048      	b.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d044      	beq.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7ff fa3d 	bl	80019e4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d139      	bne.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10d      	bne.n	80025a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	43da      	mvns	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	e00c      	b.n	80025bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d116      	bne.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e023      	b.n	8002638 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10d      	bne.n	8002616 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	43da      	mvns	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	e00c      	b.n	8002630 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	43da      	mvns	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4013      	ands	r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	429a      	cmp	r2, r3
 8002634:	d093      	beq.n	800255e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800264e:	e071      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265e:	d123      	bne.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e067      	b.n	8002778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d041      	beq.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b0:	f7ff f998 	bl	80019e4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d302      	bcc.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d136      	bne.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10c      	bne.n	80026ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	e00b      	b.n	8002702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4013      	ands	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d016      	beq.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e021      	b.n	8002778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10c      	bne.n	8002758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	43da      	mvns	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e00b      	b.n	8002770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4013      	ands	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf14      	ite	ne
 800276a:	2301      	movne	r3, #1
 800276c:	2300      	moveq	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f af6d 	bne.w	8002650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278c:	e034      	b.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f886 	bl	80028a0 <I2C_IsAcknowledgeFailed>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e034      	b.n	8002808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d028      	beq.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7ff f91d 	bl	80019e4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11d      	bne.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	2b80      	cmp	r3, #128	@ 0x80
 80027c8:	d016      	beq.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e007      	b.n	8002808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002802:	2b80      	cmp	r3, #128	@ 0x80
 8002804:	d1c3      	bne.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800281c:	e034      	b.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f83e 	bl	80028a0 <I2C_IsAcknowledgeFailed>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e034      	b.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d028      	beq.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7ff f8d5 	bl	80019e4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d11d      	bne.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d016      	beq.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e007      	b.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d1c3      	bne.n	800281e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b6:	d11b      	bne.n	80028f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cc      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90c      	bls.n	800293c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a58      	ldr	r2, [pc, #352]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800295e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a52      	ldr	r2, [pc, #328]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d044      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e067      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4934      	ldr	r1, [pc, #208]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fff8 	bl	80019e4 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fff4 	bl	80019e4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20c      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f855 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe ff58 	bl	800195c <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	080046d0 	.word	0x080046d0
 8002ac4:	20000010 	.word	0x20000010
 8002ac8:	20000014 	.word	0x20000014

08002acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000010 	.word	0x20000010

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a9b      	lsrs	r3, r3, #10
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	@ (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	080046e0 	.word	0x080046e0

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b10:	f7ff ffdc 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0b5b      	lsrs	r3, r3, #13
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4903      	ldr	r1, [pc, #12]	@ (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	080046e0 	.word	0x080046e0

08002b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0ae      	sub	sp, #184	@ 0xb8
 8002b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5a:	4bcb      	ldr	r3, [pc, #812]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	f200 8206 	bhi.w	8002f74 <HAL_RCC_GetSysClockFreq+0x440>
 8002b68:	a201      	add	r2, pc, #4	@ (adr r2, 8002b70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002ba5 	.word	0x08002ba5
 8002b74:	08002f75 	.word	0x08002f75
 8002b78:	08002f75 	.word	0x08002f75
 8002b7c:	08002f75 	.word	0x08002f75
 8002b80:	08002bad 	.word	0x08002bad
 8002b84:	08002f75 	.word	0x08002f75
 8002b88:	08002f75 	.word	0x08002f75
 8002b8c:	08002f75 	.word	0x08002f75
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002f75 	.word	0x08002f75
 8002b98:	08002f75 	.word	0x08002f75
 8002b9c:	08002f75 	.word	0x08002f75
 8002ba0:	08002da5 	.word	0x08002da5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4bb9      	ldr	r3, [pc, #740]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002baa:	e1e7      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4bb8      	ldr	r3, [pc, #736]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bb2:	e1e3      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4bb4      	ldr	r3, [pc, #720]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc0:	4bb1      	ldr	r3, [pc, #708]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d071      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bcc:	4bae      	ldr	r3, [pc, #696]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bd8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	f04f 0000 	mov.w	r0, #0
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	0159      	lsls	r1, r3, #5
 8002c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c04:	0150      	lsls	r0, r2, #5
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	1a51      	subs	r1, r2, r1
 8002c0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c10:	4629      	mov	r1, r5
 8002c12:	eb63 0301 	sbc.w	r3, r3, r1
 8002c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c24:	4649      	mov	r1, r9
 8002c26:	018b      	lsls	r3, r1, #6
 8002c28:	4641      	mov	r1, r8
 8002c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2e:	4641      	mov	r1, r8
 8002c30:	018a      	lsls	r2, r1, #6
 8002c32:	4641      	mov	r1, r8
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c38:	4649      	mov	r1, r9
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	00cb      	lsls	r3, r1, #3
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c56:	4641      	mov	r1, r8
 8002c58:	00ca      	lsls	r2, r1, #3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4622      	mov	r2, r4
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c66:	462b      	mov	r3, r5
 8002c68:	460a      	mov	r2, r1
 8002c6a:	eb42 0303 	adc.w	r3, r2, r3
 8002c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	024b      	lsls	r3, r1, #9
 8002c80:	4621      	mov	r1, r4
 8002c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c86:	4621      	mov	r1, r4
 8002c88:	024a      	lsls	r2, r1, #9
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ca0:	f7fd fea0 	bl	80009e4 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cae:	e067      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb0:	4b75      	ldr	r3, [pc, #468]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cca:	2300      	movs	r3, #0
 8002ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	f04f 0000 	mov.w	r0, #0
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce4:	0150      	lsls	r0, r2, #5
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4621      	mov	r1, r4
 8002cec:	1a51      	subs	r1, r2, r1
 8002cee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d04:	4649      	mov	r1, r9
 8002d06:	018b      	lsls	r3, r1, #6
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d0e:	4641      	mov	r1, r8
 8002d10:	018a      	lsls	r2, r1, #6
 8002d12:	4641      	mov	r1, r8
 8002d14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d18:	4649      	mov	r1, r9
 8002d1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d32:	4692      	mov	sl, r2
 8002d34:	469b      	mov	fp, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	eb1a 0303 	adds.w	r3, sl, r3
 8002d3c:	623b      	str	r3, [r7, #32]
 8002d3e:	462b      	mov	r3, r5
 8002d40:	eb4b 0303 	adc.w	r3, fp, r3
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d52:	4629      	mov	r1, r5
 8002d54:	028b      	lsls	r3, r1, #10
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	028a      	lsls	r2, r1, #10
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d68:	2200      	movs	r2, #0
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d72:	f7fd fe37 	bl	80009e4 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d80:	4b41      	ldr	r3, [pc, #260]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002da2:	e0eb      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db0:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d06b      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b32      	ldr	r3, [pc, #200]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dce:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002dd8:	4622      	mov	r2, r4
 8002dda:	462b      	mov	r3, r5
 8002ddc:	f04f 0000 	mov.w	r0, #0
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	0159      	lsls	r1, r3, #5
 8002de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dea:	0150      	lsls	r0, r2, #5
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4621      	mov	r1, r4
 8002df2:	1a51      	subs	r1, r2, r1
 8002df4:	61b9      	str	r1, [r7, #24]
 8002df6:	4629      	mov	r1, r5
 8002df8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	018b      	lsls	r3, r1, #6
 8002e0e:	4651      	mov	r1, sl
 8002e10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e14:	4651      	mov	r1, sl
 8002e16:	018a      	lsls	r2, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ebb2 0801 	subs.w	r8, r2, r1
 8002e1e:	4659      	mov	r1, fp
 8002e20:	eb63 0901 	sbc.w	r9, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e38:	4690      	mov	r8, r2
 8002e3a:	4699      	mov	r9, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	eb18 0303 	adds.w	r3, r8, r3
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	462b      	mov	r3, r5
 8002e46:	eb49 0303 	adc.w	r3, r9, r3
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e58:	4629      	mov	r1, r5
 8002e5a:	024b      	lsls	r3, r1, #9
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e62:	4621      	mov	r1, r4
 8002e64:	024a      	lsls	r2, r1, #9
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e6e:	2200      	movs	r2, #0
 8002e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e78:	f7fd fdb4 	bl	80009e4 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e86:	e065      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x420>
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e94:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002eaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec0:	0150      	lsls	r0, r2, #5
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	1a51      	subs	r1, r2, r1
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	4649      	mov	r1, r9
 8002ece:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	018b      	lsls	r3, r1, #6
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eea:	4651      	mov	r1, sl
 8002eec:	018a      	lsls	r2, r1, #6
 8002eee:	4651      	mov	r1, sl
 8002ef0:	1a54      	subs	r4, r2, r1
 8002ef2:	4659      	mov	r1, fp
 8002ef4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	00eb      	lsls	r3, r5, #3
 8002f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f06:	00e2      	lsls	r2, r4, #3
 8002f08:	4614      	mov	r4, r2
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	18e3      	adds	r3, r4, r3
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	464b      	mov	r3, r9
 8002f14:	eb45 0303 	adc.w	r3, r5, r3
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f26:	4629      	mov	r1, r5
 8002f28:	028b      	lsls	r3, r1, #10
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f30:	4621      	mov	r1, r4
 8002f32:	028a      	lsls	r2, r1, #10
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f46:	f7fd fd4d 	bl	80009e4 <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0f1b      	lsrs	r3, r3, #28
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	37b8      	adds	r7, #184	@ 0xb8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	00f42400 	.word	0x00f42400

08002f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e28d      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8083 	beq.w	80030ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fb4:	4b94      	ldr	r3, [pc, #592]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d019      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fc0:	4b91      	ldr	r3, [pc, #580]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b8b      	ldr	r3, [pc, #556]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d112      	bne.n	800300c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b88      	ldr	r3, [pc, #544]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ff2:	d10b      	bne.n	800300c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	4b84      	ldr	r3, [pc, #528]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x124>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d157      	bne.n	80030b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e25a      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x90>
 8003016:	4b7c      	ldr	r3, [pc, #496]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7b      	ldr	r2, [pc, #492]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e01d      	b.n	8003060 <HAL_RCC_OscConfig+0xcc>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0xb4>
 800302e:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b73      	ldr	r3, [pc, #460]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a72      	ldr	r2, [pc, #456]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xcc>
 8003048:	4b6f      	ldr	r3, [pc, #444]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6e      	ldr	r2, [pc, #440]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800304e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b6c      	ldr	r3, [pc, #432]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6b      	ldr	r2, [pc, #428]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800305a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fcbc 	bl	80019e4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fcb8 	bl	80019e4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	@ 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e21f      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b61      	ldr	r3, [pc, #388]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xdc>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fca8 	bl	80019e4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe fca4 	bl	80019e4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	@ 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e20b      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	4b57      	ldr	r3, [pc, #348]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x104>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06f      	beq.n	80031a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030c6:	4b50      	ldr	r3, [pc, #320]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030de:	4b4a      	ldr	r3, [pc, #296]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b44      	ldr	r3, [pc, #272]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x186>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1d3      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3b      	ldr	r3, [pc, #236]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4937      	ldr	r1, [pc, #220]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x278>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe fc51 	bl	80019e4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe fc4d 	bl	80019e4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1b4      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4925      	ldr	r1, [pc, #148]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b24      	ldr	r3, [pc, #144]	@ (800320c <HAL_RCC_OscConfig+0x278>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fc30 	bl	80019e4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7fe fc2c 	bl	80019e4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e193      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe fc10 	bl	80019e4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe fc0c 	bl	80019e4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e173      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_RCC_OscConfig+0x274>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x234>
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe fbf9 	bl	80019e4 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe fbf5 	bl	80019e4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e15c      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
 8003208:	40023800 	.word	0x40023800
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b8a      	ldr	r3, [pc, #552]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8097 	beq.w	800335c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b83      	ldr	r3, [pc, #524]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b7f      	ldr	r3, [pc, #508]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a7e      	ldr	r2, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
 800324e:	4b7c      	ldr	r3, [pc, #496]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b79      	ldr	r3, [pc, #484]	@ (8003444 <HAL_RCC_OscConfig+0x4b0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x4b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x4b0>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fe fbb5 	bl	80019e4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fe fbb1 	bl	80019e4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e118      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x4b0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x31e>
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	4a65      	ldr	r2, [pc, #404]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x358>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x340>
 80032ba:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	4a60      	ldr	r2, [pc, #384]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x358>
 80032d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	4a59      	ldr	r2, [pc, #356]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e0:	4b57      	ldr	r3, [pc, #348]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a56      	ldr	r2, [pc, #344]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe fb76 	bl	80019e4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe fb72 	bl	80019e4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0d7      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b4b      	ldr	r3, [pc, #300]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x368>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fb60 	bl	80019e4 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fb5c 	bl	80019e4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0c1      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	4b40      	ldr	r3, [pc, #256]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	4a3a      	ldr	r2, [pc, #232]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80ad 	beq.w	80034c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003366:	4b36      	ldr	r3, [pc, #216]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d060      	beq.n	8003434 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d145      	bne.n	8003406 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b33      	ldr	r3, [pc, #204]	@ (8003448 <HAL_RCC_OscConfig+0x4b4>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fb30 	bl	80019e4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fb2c 	bl	80019e4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e093      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	491b      	ldr	r1, [pc, #108]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RCC_OscConfig+0x4b4>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe fb01 	bl	80019e4 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fe fafd 	bl	80019e4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e064      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x452>
 8003404:	e05c      	b.n	80034c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <HAL_RCC_OscConfig+0x4b4>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe faea 	bl	80019e4 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fae6 	bl	80019e4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e04d      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x480>
 8003432:	e045      	b.n	80034c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e040      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
 8003440:	40023800 	.word	0x40023800
 8003444:	40007000 	.word	0x40007000
 8003448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800344c:	4b1f      	ldr	r3, [pc, #124]	@ (80034cc <HAL_RCC_OscConfig+0x538>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d030      	beq.n	80034bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d129      	bne.n	80034bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d122      	bne.n	80034bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003484:	4293      	cmp	r3, r2
 8003486:	d119      	bne.n	80034bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	3b01      	subs	r3, #1
 8003496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d10f      	bne.n	80034bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e041      	b.n	8003566 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe f900 	bl	80016fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fb4e 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <HAL_TIM_IC_Start_IT+0x1e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e013      	b.n	80035b6 <HAL_TIM_IC_Start_IT+0x46>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d104      	bne.n	800359e <HAL_TIM_IC_Start_IT+0x2e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800359a:	b2db      	uxtb	r3, r3
 800359c:	e00b      	b.n	80035b6 <HAL_TIM_IC_Start_IT+0x46>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_IC_Start_IT+0x3e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e003      	b.n	80035b6 <HAL_TIM_IC_Start_IT+0x46>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_TIM_IC_Start_IT+0x58>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e013      	b.n	80035f0 <HAL_TIM_IC_Start_IT+0x80>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d104      	bne.n	80035d8 <HAL_TIM_IC_Start_IT+0x68>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e00b      	b.n	80035f0 <HAL_TIM_IC_Start_IT+0x80>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d104      	bne.n	80035e8 <HAL_TIM_IC_Start_IT+0x78>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e003      	b.n	80035f0 <HAL_TIM_IC_Start_IT+0x80>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035f2:	7bbb      	ldrb	r3, [r7, #14]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035f8:	7b7b      	ldrb	r3, [r7, #13]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0cc      	b.n	800379c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <HAL_TIM_IC_Start_IT+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003610:	e013      	b.n	800363a <HAL_TIM_IC_Start_IT+0xca>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d104      	bne.n	8003622 <HAL_TIM_IC_Start_IT+0xb2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003620:	e00b      	b.n	800363a <HAL_TIM_IC_Start_IT+0xca>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d104      	bne.n	8003632 <HAL_TIM_IC_Start_IT+0xc2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003630:	e003      	b.n	800363a <HAL_TIM_IC_Start_IT+0xca>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_TIM_IC_Start_IT+0xda>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003648:	e013      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x102>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d104      	bne.n	800365a <HAL_TIM_IC_Start_IT+0xea>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003658:	e00b      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x102>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d104      	bne.n	800366a <HAL_TIM_IC_Start_IT+0xfa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003668:	e003      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x102>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d841      	bhi.n	80036fc <HAL_TIM_IC_Start_IT+0x18c>
 8003678:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <HAL_TIM_IC_Start_IT+0x110>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036b5 	.word	0x080036b5
 8003684:	080036fd 	.word	0x080036fd
 8003688:	080036fd 	.word	0x080036fd
 800368c:	080036fd 	.word	0x080036fd
 8003690:	080036c7 	.word	0x080036c7
 8003694:	080036fd 	.word	0x080036fd
 8003698:	080036fd 	.word	0x080036fd
 800369c:	080036fd 	.word	0x080036fd
 80036a0:	080036d9 	.word	0x080036d9
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	080036fd 	.word	0x080036fd
 80036ac:	080036fd 	.word	0x080036fd
 80036b0:	080036eb 	.word	0x080036eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0202 	orr.w	r2, r2, #2
 80036c2:	60da      	str	r2, [r3, #12]
      break;
 80036c4:	e01d      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0204 	orr.w	r2, r2, #4
 80036d4:	60da      	str	r2, [r3, #12]
      break;
 80036d6:	e014      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0208 	orr.w	r2, r2, #8
 80036e6:	60da      	str	r2, [r3, #12]
      break;
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0210 	orr.w	r2, r2, #16
 80036f8:	60da      	str	r2, [r3, #12]
      break;
 80036fa:	e002      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	bf00      	nop
  }

  if (status == HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d148      	bne.n	800379a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fc23 	bl	8003f5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a22      	ldr	r2, [pc, #136]	@ (80037a4 <HAL_TIM_IC_Start_IT+0x234>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003728:	d01d      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1e      	ldr	r2, [pc, #120]	@ (80037a8 <HAL_TIM_IC_Start_IT+0x238>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_TIM_IC_Start_IT+0x23c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <HAL_TIM_IC_Start_IT+0x240>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <HAL_TIM_IC_Start_IT+0x244>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a18      	ldr	r2, [pc, #96]	@ (80037b8 <HAL_TIM_IC_Start_IT+0x248>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIM_IC_Start_IT+0x1f6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <HAL_TIM_IC_Start_IT+0x24c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d010      	beq.n	800379a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	e007      	b.n	800379a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40010400 	.word	0x40010400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40001800 	.word	0x40001800

080037c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0202 	mvn.w	r2, #2
 80037f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fc90 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9ae 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f9b5 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0204 	mvn.w	r2, #4
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fc6a 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f988 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f98f 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d020      	beq.n	80038bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0208 	mvn.w	r2, #8
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2204      	movs	r2, #4
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fc44 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f962 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f969 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d020      	beq.n	8003908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01b      	beq.n	8003908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0210 	mvn.w	r2, #16
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2208      	movs	r2, #8
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fc1e 	bl	8001130 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f93c 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f943 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0201 	mvn.w	r2, #1
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f91a 	bl	8003b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fbb2 	bl	80040b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f914 	bl	8003b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0220 	mvn.w	r2, #32
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fb84 	bl	80040a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_TIM_IC_ConfigChannel+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e088      	b.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0x130>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11b      	bne.n	8003a04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80039dc:	f000 f994 	bl	8003d08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 020c 	bic.w	r2, r2, #12
 80039ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	619a      	str	r2, [r3, #24]
 8003a02:	e060      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d11c      	bne.n	8003a44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003a1a:	f000 f9e9 	bl	8003df0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6999      	ldr	r1, [r3, #24]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	619a      	str	r2, [r3, #24]
 8003a42:	e040      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11b      	bne.n	8003a82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a5a:	f000 fa06 	bl	8003e6a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 020c 	bic.w	r2, r2, #12
 8003a6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	61da      	str	r2, [r3, #28]
 8003a80:	e021      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b0c      	cmp	r3, #12
 8003a86:	d11c      	bne.n	8003ac2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a98:	f000 fa23 	bl	8003ee2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003aaa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69d9      	ldr	r1, [r3, #28]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	61da      	str	r2, [r3, #28]
 8003ac0:	e001      	b.n	8003ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d831      	bhi.n	8003b50 <HAL_TIM_ReadCapturedValue+0x78>
 8003aec:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b51 	.word	0x08003b51
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b47 	.word	0x08003b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2e:	60fb      	str	r3, [r7, #12]

      break;
 8003b30:	e00f      	b.n	8003b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	60fb      	str	r3, [r7, #12]

      break;
 8003b3a:	e00a      	b.n	8003b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b42:	60fb      	str	r3, [r7, #12]

      break;
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	60fb      	str	r3, [r7, #12]

      break;
 8003b4e:	e000      	b.n	8003b52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003b50:	bf00      	nop
  }

  return tmpreg;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a46      	ldr	r2, [pc, #280]	@ (8003cdc <TIM_Base_SetConfig+0x12c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a43      	ldr	r2, [pc, #268]	@ (8003ce0 <TIM_Base_SetConfig+0x130>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a42      	ldr	r2, [pc, #264]	@ (8003ce4 <TIM_Base_SetConfig+0x134>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a41      	ldr	r2, [pc, #260]	@ (8003ce8 <TIM_Base_SetConfig+0x138>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a40      	ldr	r2, [pc, #256]	@ (8003cec <TIM_Base_SetConfig+0x13c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a35      	ldr	r2, [pc, #212]	@ (8003cdc <TIM_Base_SetConfig+0x12c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c10:	d027      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a32      	ldr	r2, [pc, #200]	@ (8003ce0 <TIM_Base_SetConfig+0x130>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d023      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <TIM_Base_SetConfig+0x134>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01f      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a30      	ldr	r2, [pc, #192]	@ (8003ce8 <TIM_Base_SetConfig+0x138>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003cec <TIM_Base_SetConfig+0x13c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d017      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf0 <TIM_Base_SetConfig+0x140>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf4 <TIM_Base_SetConfig+0x144>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00f      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <TIM_Base_SetConfig+0x148>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <TIM_Base_SetConfig+0x14c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	@ (8003d00 <TIM_Base_SetConfig+0x150>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a29      	ldr	r2, [pc, #164]	@ (8003d04 <TIM_Base_SetConfig+0x154>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	@ (8003cdc <TIM_Base_SetConfig+0x12c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0xf8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <TIM_Base_SetConfig+0x13c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d103      	bne.n	8003cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	611a      	str	r2, [r3, #16]
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40010400 	.word	0x40010400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	40001800 	.word	0x40001800
 8003d00:	40001c00 	.word	0x40001c00
 8003d04:	40002000 	.word	0x40002000

08003d08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 0201 	bic.w	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a28      	ldr	r2, [pc, #160]	@ (8003dd4 <TIM_TI1_SetConfig+0xcc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01b      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3c:	d017      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a25      	ldr	r2, [pc, #148]	@ (8003dd8 <TIM_TI1_SetConfig+0xd0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a24      	ldr	r2, [pc, #144]	@ (8003ddc <TIM_TI1_SetConfig+0xd4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00f      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a23      	ldr	r2, [pc, #140]	@ (8003de0 <TIM_TI1_SetConfig+0xd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a22      	ldr	r2, [pc, #136]	@ (8003de4 <TIM_TI1_SetConfig+0xdc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a21      	ldr	r2, [pc, #132]	@ (8003de8 <TIM_TI1_SetConfig+0xe0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_TI1_SetConfig+0x66>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a20      	ldr	r2, [pc, #128]	@ (8003dec <TIM_TI1_SetConfig+0xe4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <TIM_TI1_SetConfig+0x6a>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <TIM_TI1_SetConfig+0x6c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e003      	b.n	8003d92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f023 030a 	bic.w	r3, r3, #10
 8003dac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f003 030a 	and.w	r3, r3, #10
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40001800 	.word	0x40001800

08003df0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 0210 	bic.w	r2, r3, #16
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	031b      	lsls	r3, r3, #12
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ea6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003eba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b087      	sub	sp, #28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e05a      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d01d      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1d      	ldr	r2, [pc, #116]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a17      	ldr	r2, [pc, #92]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40010400 	.word	0x40010400
 8004098:	40014000 	.word	0x40014000
 800409c:	40001800 	.word	0x40001800

080040a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e042      	b.n	8004160 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd fb54 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	@ 0x24
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800410a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f82b 	bl	8004168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b0c0      	sub	sp, #256	@ 0x100
 800416e:	af00      	add	r7, sp, #0
 8004170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	ea40 0301 	orr.w	r3, r0, r1
 8004190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041c0:	f021 010c 	bic.w	r1, r1, #12
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041ce:	430b      	orrs	r3, r1
 80041d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e2:	6999      	ldr	r1, [r3, #24]
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	ea40 0301 	orr.w	r3, r0, r1
 80041ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <UART_SetConfig+0x2cc>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d005      	beq.n	8004208 <UART_SetConfig+0xa0>
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b8d      	ldr	r3, [pc, #564]	@ (8004438 <UART_SetConfig+0x2d0>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d104      	bne.n	8004212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe fc80 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 800420c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004210:	e003      	b.n	800421a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004212:	f7fe fc67 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8004216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004224:	f040 810c 	bne.w	8004440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	1891      	adds	r1, r2, r2
 8004240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004242:	415b      	adcs	r3, r3
 8004244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800424a:	4621      	mov	r1, r4
 800424c:	eb12 0801 	adds.w	r8, r2, r1
 8004250:	4629      	mov	r1, r5
 8004252:	eb43 0901 	adc.w	r9, r3, r1
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426a:	4690      	mov	r8, r2
 800426c:	4699      	mov	r9, r3
 800426e:	4623      	mov	r3, r4
 8004270:	eb18 0303 	adds.w	r3, r8, r3
 8004274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004278:	462b      	mov	r3, r5
 800427a:	eb49 0303 	adc.w	r3, r9, r3
 800427e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800428e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004296:	460b      	mov	r3, r1
 8004298:	18db      	adds	r3, r3, r3
 800429a:	653b      	str	r3, [r7, #80]	@ 0x50
 800429c:	4613      	mov	r3, r2
 800429e:	eb42 0303 	adc.w	r3, r2, r3
 80042a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042ac:	f7fc fb9a 	bl	80009e4 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b61      	ldr	r3, [pc, #388]	@ (800443c <UART_SetConfig+0x2d4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042d8:	415b      	adcs	r3, r3
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042e0:	4641      	mov	r1, r8
 80042e2:	eb12 0a01 	adds.w	sl, r2, r1
 80042e6:	4649      	mov	r1, r9
 80042e8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004300:	4692      	mov	sl, r2
 8004302:	469b      	mov	fp, r3
 8004304:	4643      	mov	r3, r8
 8004306:	eb1a 0303 	adds.w	r3, sl, r3
 800430a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800430e:	464b      	mov	r3, r9
 8004310:	eb4b 0303 	adc.w	r3, fp, r3
 8004314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800432c:	460b      	mov	r3, r1
 800432e:	18db      	adds	r3, r3, r3
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
 8004332:	4613      	mov	r3, r2
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	647b      	str	r3, [r7, #68]	@ 0x44
 800433a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800433e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004342:	f7fc fb4f 	bl	80009e4 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <UART_SetConfig+0x2d4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	@ 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004362:	4b36      	ldr	r3, [pc, #216]	@ (800443c <UART_SetConfig+0x2d4>)
 8004364:	fba3 2302 	umull	r2, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004370:	441c      	add	r4, r3
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800437c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800438c:	415b      	adcs	r3, r3
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6339      	str	r1, [r7, #48]	@ 0x30
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043c8:	464b      	mov	r3, r9
 80043ca:	460a      	mov	r2, r1
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043e8:	460b      	mov	r3, r1
 80043ea:	18db      	adds	r3, r3, r3
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ee:	4613      	mov	r3, r2
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043fe:	f7fc faf1 	bl	80009e4 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4b0d      	ldr	r3, [pc, #52]	@ (800443c <UART_SetConfig+0x2d4>)
 8004408:	fba3 1302 	umull	r1, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	2164      	movs	r1, #100	@ 0x64
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	3332      	adds	r3, #50	@ 0x32
 800441a:	4a08      	ldr	r2, [pc, #32]	@ (800443c <UART_SetConfig+0x2d4>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	f003 0207 	and.w	r2, r3, #7
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4422      	add	r2, r4
 800442e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004430:	e106      	b.n	8004640 <UART_SetConfig+0x4d8>
 8004432:	bf00      	nop
 8004434:	40011000 	.word	0x40011000
 8004438:	40011400 	.word	0x40011400
 800443c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800444a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800444e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	6239      	str	r1, [r7, #32]
 800445a:	415b      	adcs	r3, r3
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	4641      	mov	r1, r8
 8004464:	1854      	adds	r4, r2, r1
 8004466:	4649      	mov	r1, r9
 8004468:	eb43 0501 	adc.w	r5, r3, r1
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	00eb      	lsls	r3, r5, #3
 8004476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447a:	00e2      	lsls	r2, r4, #3
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	4643      	mov	r3, r8
 8004482:	18e3      	adds	r3, r4, r3
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004488:	464b      	mov	r3, r9
 800448a:	eb45 0303 	adc.w	r3, r5, r3
 800448e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800449e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044ae:	4629      	mov	r1, r5
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b8:	4621      	mov	r1, r4
 80044ba:	008a      	lsls	r2, r1, #2
 80044bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044c0:	f7fc fa90 	bl	80009e4 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b60      	ldr	r3, [pc, #384]	@ (800464c <UART_SetConfig+0x4e4>)
 80044ca:	fba3 2302 	umull	r2, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	011c      	lsls	r4, r3, #4
 80044d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	61b9      	str	r1, [r7, #24]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	4641      	mov	r1, r8
 80044f6:	1851      	adds	r1, r2, r1
 80044f8:	6139      	str	r1, [r7, #16]
 80044fa:	4649      	mov	r1, r9
 80044fc:	414b      	adcs	r3, r1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800450c:	4659      	mov	r1, fp
 800450e:	00cb      	lsls	r3, r1, #3
 8004510:	4651      	mov	r1, sl
 8004512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004516:	4651      	mov	r1, sl
 8004518:	00ca      	lsls	r2, r1, #3
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4603      	mov	r3, r0
 8004520:	4642      	mov	r2, r8
 8004522:	189b      	adds	r3, r3, r2
 8004524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004528:	464b      	mov	r3, r9
 800452a:	460a      	mov	r2, r1
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800453e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800455e:	f7fc fa41 	bl	80009e4 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4611      	mov	r1, r2
 8004568:	4b38      	ldr	r3, [pc, #224]	@ (800464c <UART_SetConfig+0x4e4>)
 800456a:	fba3 2301 	umull	r2, r3, r3, r1
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2264      	movs	r2, #100	@ 0x64
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	1acb      	subs	r3, r1, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	@ 0x32
 800457c:	4a33      	ldr	r2, [pc, #204]	@ (800464c <UART_SetConfig+0x4e4>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	673b      	str	r3, [r7, #112]	@ 0x70
 8004592:	677a      	str	r2, [r7, #116]	@ 0x74
 8004594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	1891      	adds	r1, r2, r2
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	415b      	adcs	r3, r3
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a8:	4641      	mov	r1, r8
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	6039      	str	r1, [r7, #0]
 80045ae:	4649      	mov	r1, r9
 80045b0:	414b      	adcs	r3, r1
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c0:	4659      	mov	r1, fp
 80045c2:	00cb      	lsls	r3, r1, #3
 80045c4:	4651      	mov	r1, sl
 80045c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ca:	4651      	mov	r1, sl
 80045cc:	00ca      	lsls	r2, r1, #3
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	4642      	mov	r2, r8
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045da:	464b      	mov	r3, r9
 80045dc:	460a      	mov	r2, r1
 80045de:	eb42 0303 	adc.w	r3, r2, r3
 80045e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045fc:	4649      	mov	r1, r9
 80045fe:	008b      	lsls	r3, r1, #2
 8004600:	4641      	mov	r1, r8
 8004602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004606:	4641      	mov	r1, r8
 8004608:	008a      	lsls	r2, r1, #2
 800460a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800460e:	f7fc f9e9 	bl	80009e4 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <UART_SetConfig+0x4e4>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	@ 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	3332      	adds	r3, #50	@ 0x32
 800462a:	4a08      	ldr	r2, [pc, #32]	@ (800464c <UART_SetConfig+0x4e4>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4422      	add	r2, r4
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004646:	46bd      	mov	sp, r7
 8004648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464c:	51eb851f 	.word	0x51eb851f

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4d0d      	ldr	r5, [pc, #52]	@ (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	@ (800469c <__libc_init_array+0x3c>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2600      	movs	r6, #0
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4d0b      	ldr	r5, [pc, #44]	@ (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	@ (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 f818 	bl	80046a8 <_init>
 8004678:	1b64      	subs	r4, r4, r5
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2600      	movs	r6, #0
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	080046f0 	.word	0x080046f0
 800469c:	080046f0 	.word	0x080046f0
 80046a0:	080046f0 	.word	0x080046f0
 80046a4:	080046f4 	.word	0x080046f4

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
